
darwin meshes
https://www.thingiverse.com/thing:9793/#files

todo:

collect raw data again that is better


figure out P_t and P_z variance (diagonal) values that correctly represent the
state and sensor variances -- this is kind of like the Rao-Blackwellization

process for offline:
filter contact sensors?
clean marker data (velocity filter and bounding box filter)
covariance matrix needs diagonal values
root pos, joint pos, root vel, joint vel for state



07/15

PzAdd seems totally critical, even with sensor noise
PtAdd contributes to more stable estimation, but may be un-realistic?

even weighting makes things more stable

**** Ctrl noise does not make too much difference it seems in increasing the state 
**** covariance
      More control noise allows for the 'process' noise to increase a bit->
        this means more allowance for the sensors to correct and is somewhat
        needed (1e-3, 1e-4)

qhat is also somewhat neutral to helpful
    shat and qhat seem to go together; maybe they just cancel out all effects?
    shat and qhat help when there is sensor noise injected into the estimates

constraint scaling seems to cause harm, but when PtAdd / covar is large, it
seems to mitigate some effects?
    Maybe constraint scaling just does not matter when using even weighting

TODO seem to be missing some senors?


07/17

ctrl noise is 1e-3, 1e-4 for walk4.csv
qhat and shat are zero'd out, with 1e10 on the phasespace sensors
 <numeric name="snsr_covar" size="15" data="
 1e-2 1e-4 1e-0 1e-0 1e-6  1e-2 1e-0
 1e-0 1e-0 1e-0 1e-0 1e+10 1e-0 1e-0 1e-0" />

Making the contacts softer doesn't change the effects; aka the friction is not
critical to the correct stepping behavior. Forward walking still appears due to
the other sensors more so than the robot actually stepping.

even weighting, no scaling
./viewer -m ../models/darwin.xml -r 1 -f walk3.csv -d 1e-3 -i -1 -t 6 -n 0

Model needs to be sped up:
  less boxes?
  spheres instead?


07/18
reducing condim helps to make things slightly faster, but a little more
unstable?
  the friction / torquing helps the robot stay upright

adding sensor noise does not seem to matter that much; probably the effects
  are overwritten by the pzadd

For more perf:
  Do predict_correct_p1 while data is collecting
    when data is ready, do predict correct p2


07/20
Paper organization:
    intro
    related works
      DRC papers
      limitations of MHE
      limitations of splitting the estimator in two
    problem description
      process noise is hard to quantify
      x modelling errors are always present
      x contacts as discontinuities means that traditional kalman methods are difficult
    x UKF and process noise / ensemble
      x even weighting vs traditional weighting
      x  -- why does traditional fail?
      x PzAdd and sensor noise

      # time noise
      # control noise
      # model noise == ensemble method, but gives us our process noise

    x robot platform
      x Darwin, 26 dof, etc etc.
    x Methods
      x Running online
      x Comparing offline data with different parameters
      x Plot of real walking data, distance vs UKF styles
        x minimal process noise
        x increasing process noise from ensemble process
    results
      'the ensembled ukf is great'
    discussion & conclusion
    future work

run benchmarks single threaded--the random values and threading 
must be causing additional variance in the estimation

RMSE: only use markers visible the whole time? more model tweaking? make
contacts harder again?

07/21
Have plots showing how the model noise helps reduce RMSE, but i am not sure if
the phasespace rmse is very accurate of a measure of success.

07/26
LOO plot with real data; include contact / torque more?
scaled model noise plot: summed RMSE vs amount of noise of TMC model
include phasespace data? 

make plot that does an overhead view of distance travelled?

adding sensor noise? needed

collect falling data
  collected; re-do RMSE for falling / fallen model
    this means cleaning the csv files

RMSE units: Meters


07/27
todo list:
  x produce final LOO w/ real data
  x produce diminishing returns plot
  x data for table
  x remade rmse plot (that is mostly okay)
  image graphic of timing data

REDO the rms table data while scaling the control noise as well?

do related works
  do intro
    do process noise section
      fill in results
      do the conclusion
        do references


07/29
read and proof the paper
diagnose robot power issues
benchmark software 
  separate thread for contact data acq?
  use the phidgets gyro instead of cm730 to reduce read time.
  set up async cm730 reading? let serial data be buffered in kernel?

estimator code:
  benchmark cache usage
  decrease context switching cost.

08/22
Should test the low-latency kernels with sensor performance
need to re-jigger the phasespace stuff as it would be nice to use in estimation


09/26
cleaning up for final submission
things to test:
  constraint limiting for correction step 
  traditional weighting for state update and / or covariance update?

  Even weighting on state but traditional on covariance seems to be okay

09/27
Traditional weighting on state but with clamped sensors?

Better PtAdd matrix for root vs joint dimensions?


traditional weighting on covariance, even on state does not hold for real data
  energy limit on update may help but covariance still blows up

change to better motor model may help


09/28
when sensors are aggressively corrected for, sim has a tendency to use bad sensor
values; overcorrection
    need to limit sensor values to sensible units?
    this suggests significant modelling errors; ukf can estimate with noise
        on a simulated model, but can't match up with real model
        the markers fight with the other sensors a lot; without an accurate model
        we cannot treat the sensors as accurate?

09/29
todo list
    impose sensor ranges? done; helps tremendously
    sensor offset vectors (sage-husa adaptive)?
        Seems to help in some cases but needs additional tuning
    limit the contact sensors to be just z-axis? not needed with sensor limits

still need to:
  test with noisey models
  test without phasespace data
    further phasespace data cleanup to avoid floating; could be sage-husa?

10/04
    For revision:
    Try to make new dataset:
        phasespace orientation based on foor markers instead of chest markers
        slower walking & fallen
        longer data
        video of these data sets?
    regenerate plots on these data sets
    rebut the comments re: other papers

11/02
  Fixing code to make videos
    perfect model, no noise
      ./viewer -m ../models/darwin.xml -s -1
    perfect model, noise from system
      ./viewer -m ../models/darwin.xml -s 1
    imperfect model, no noise
      ./viewer -m ../models/darwin.xml -s -1
    imperfect model, noise from system
      ./viewer -m ../models/darwin.xml -s -1
  Do the joint / phasespace reverse clamping trick in the estimator.

11/03
  comparing the UKF between a good and bad model, trying to show model noise is useful
    probably need to set mass closer, and change other params
    snsr_limit in bad model?

  added in root specific ptadd regularization; very helpful
  also had a min cutoff for the s-z_k difference to try and model backlash
      should probablly switch to the torque model

  long data seems to be working:
    ./viewer -m ../models/darwin_tm.xml -r 1 -f long_walk2.csv -R 1 -d -1
    ready to render a video

11/05
    inertiafromgeom=false is more correct, but the inertias are fucked regardless
    torque motors seem more realistic, but some bugs remain in getting data from file
    

    bad_motors.mov: has half kp and wrong damping / armature

    bad_darwin has wrong mass, contacts, motors, and no phasespace


11/08
    make darwin in sim walk a few slow steps, compare sensor output to
    real sensor output
        bring simulated sensors more in line with real -> system id
        better simulator for testing estimator parameters
